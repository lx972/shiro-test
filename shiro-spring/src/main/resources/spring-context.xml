<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="cn.lx.*"></context:component-scan>

    <bean id="placeholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:db.properties"></property>
    </bean>

    <bean id="basicDataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${driver}"></property>
        <property name="url" value="${url}"></property>
        <property name="username" value="${username}"></property>
        <property name="password" value="${password}"></property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="basicDataSource"></property>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="mapperLocations" value="classpath*:mapper/*.xml"></property>
    </bean>

    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.lx.shiro.dao"></property>
    </bean>
    <bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="basicDataSource"></property>
    </bean>
    <tx:annotation-driven proxy-target-class="true" transaction-manager="tx"></tx:annotation-driven>



    <!--                  以下是shiro的相关配置                  -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- override these for application-specific URLs if you like:
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/home.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="anAlias" value-ref="someFilter"/>
            </util:map>
        </property> -->
        <!--这个地方硬编码，不合理，应该从数据库加载-->
        <!--<property name="filterChainDefinitions">
            <value>
                # some example chain definitions:
                /admin/** = authc, roles[admin]
                /docs/** = authc, perms[document:read]
                /test/** = anon
                /login.html = anon
                /** = authc
                # more URL-to-FilterChain definitions here
            </value>
        </property>-->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>
    </bean>
    <!--配置一个bean，这个bean实际上是一个map，通过实例工厂方法的方式获取这个map-->
    <bean id="filterChainDefinitionMap"
          factory-bean="filterChainDefinitionMapBuilder"
          factory-method="buildFilterChainDefinitionMap"/>
    <bean id="filterChainDefinitionMapBuilder" class="cn.lx.shiro.config.FilterChainDefinitionMapBuilder"/>

    <!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
    <!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
    <!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
    <!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
    <!--<bean id="someFilter" class="..."/>
    <bean id="anotherFilter" class="..."> ... </bean>-->

    <!-- Define the realm you want to use to connect to your back-end security datasource: -->
  <!--  <bean id="myRealm" class="cn.lx.shiro.realm.MyRealm"></bean>-->

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="myRealm"/>
        <!--缓存-->
        <property name="cacheManager" ref="redisCacheManager"/>
        <!--会话管理-->
        <property name="sessionManager" ref="sessionManager"/>

    </bean>

    <bean id="myRealm" class="cn.lx.shiro.realm.MyRealm">
        <property name="IUserService" ref="userServiceImpl"></property>
        <!--realm也有缓存，把缓存管理器给它，会自动调用，进行缓存-->
        <property name="cacheManager" ref="redisCacheManager"></property>
        <!--开启认证信息缓存-->
        <property name="authenticationCachingEnabled" value="true"></property>
        <!--开启授权信息缓存-->
        <property name="authorizationCachingEnabled" value="true"></property>
    </bean>


    <!--缓存
    没有设置缓存方式，则每次都需要访问数据库
    这里是保存在内存中
    我们也可以将缓存保存在数据库中
    继承EnterpriseCacheSessionDAO，重写缓存存储方式
    -->
    <bean id="memoryConstrainedCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>

    <!--
    会话管理，默认的会话类型是this.sessionManager = new DefaultSessionManager();
    不符合web项目需求，我们可以使用自带的DefaultWebSessionManager（传统项目，一个服务器），
    也可以继承DefaultWebSessionManager，重写会话方式，改为支持jwt的
    -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!--设置使用redis管理session，而不是使用内存-->
        <property name="sessionDAO" ref="redisCacheSessionDAO"></property>
    </bean>


    <!--生命周期-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
    <!-- make the securityManager bean a static singleton.  DO NOT do this in web         -->
    <!-- applications - see the 'Web Applications' section below instead.                 -->
    <!--<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>-->

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--redis缓存管理器-->
    <bean id="redisCacheManager" class="cn.lx.shiro.config.RedisCacheManager"/>

    <!--自定义的session缓存处理-->
    <bean id="redisCacheSessionDAO" class="cn.lx.shiro.config.RedisCacheSessionDAO">
        <!--sessoin缓存页调用缓存管理器进行缓存-->
        <property name="cacheManager" ref="redisCacheManager"></property>
        <!--注入redis-->
        <property name="redisTemplate" ref="redisTemplate"></property>
    </bean>


    <!--redis-->
    <bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:use-pool="true">
        <property name="hostName" value="192.168.43.33"></property>
        <property name="database" value="10"></property>
    </bean>
    <!-- redis template definition -->
    <bean id="redisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:connection-factory-ref="jedisConnFactory">
        <!--设置key为string类型，这样可以去掉乱码问题-->
        <property name="keySerializer" ref="stringRedisSerializer"></property>
    </bean>
    <bean id="stringRedisSerializer"
          class="org.springframework.data.redis.serializer.StringRedisSerializer">
    </bean>


</beans>
